def label = "worker-${UUID.randomUUID().toString()}"

def notifySlack(STATUS, COLOR) {
    slackSend channel: '#test-jenkins ', 
	message: STATUS+" : " + "${env.JOB_NAME}[${env.BUILD_NUMBER}] (${env.BUILD_URL})", 
	color: COLOR, tokenCredentialId: 'slacklab99 ', 
	teamDomain: 'ibm-teck '
}




// Slack 알림

podTemplate(label: label, containers: [
// #0 필요한 Pod생성

	// containerTemplate(name: 'npm', image: 'node:lts', command: 'cat', ttyEnabled: true),
	//containerTemplate(name: 'gradle', image: 'gradle:4.5.1-jdk8', command: 'cat', ttyEnabled: true),
	//containerTemplate(name: 'maven', image: 'maven:3.3.9-jdk-8-alpine', ttyEnabled: true, command: 'cat'),
	containerTemplate(name: "scanner", image: "newtmitch/sonar-scanner", ttyEnabled: true, command: "cat"),
	containerTemplate(name: 'docker', image: 'docker:dind', command: 'dockerd --host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:2375 --storage-driver=overlay', ttyEnabled: true, alwaysPullImage: true, privileged: true),
	containerTemplate(name: 'kubectl', image: 'roffe/kubectl', command: 'cat', ttyEnabled: true)

]) {
  node(label) {

	// 예외처리 구문
	try {
		// Slack - 빌드 시작시
	  	notifySlack("STARTED", "#0000FF")

		// #1 Github 소스 가져오기
		stage('Get Source') {
			// git credentialsId: '{GITHUB Credential ID}', url: '{GITHUB URL}', branch: 'master'
			git "https://github.com/paul-cl/cicd-front.git"
		}
		def output = sh(script: 'ls -al', returnStdout: true)

		// #2 Properties 파일 읽기		
		def props = readProperties file:"./kubernetes/pipeline.properties" 
		def tag = props["version"]
		def namespace = props["namespace"]
		def image = props["image"]
		def appname = props["appname"]
		def containername = props["containerName"]
		def deployment = props["deployment"]
		def service = props["service"]
		def dockerRegistry = props["dockerRegistry"]
		def credentialRegistry=props["credentialRegistry"] 
		def sonarQubeURL = props["sonarQubeURL"]
		def sonarQubeProject = props["sonarQubeProject"]
		def sonarQubeToken = props["sonarQubeToken"]

		// 재배포를 위한 tag를 재정의
		def timeStamp = System.currentTimeMillis()
		echo "TimeStamp: ${timeStamp}"
		tag = tag+"-"+timeStamp

		// #3 빌드 Stage

		// #4 Sonarqube 정적분석 Stage
		echo "Start call container"
		stage('sonar-scanner') {
			container("scanner") {
				sh """ sonar-scanner \
					-Dsonar.projectName=${sonarQubeProject} \
					-Dsonar.host.url=${sonarQubeURL} \
					-Dsonar.password=${sonarQubeToken} \
					-Dsonar.projectBaseDir=./ """
				
					// -Dsonar.host.url=${sonarQubeURL} \ 
					// -Dsonar.login=${sonarQubeToken} \
					// -Dsonar.projectBaseDir=./ "
			}
		}



		// #5 컨테이너 이미지 생성 Stage
		stage('Dockerizing') {
			echo "Start Dockerizing"
			container('docker') {
				echo "Start docker"
				docker.withRegistry("${dockerRegistry}", "${credentialRegistry}") {
					sh "docker build -f ./Dockerfile -t ${image}:${tag} ${WORKSPACE}" 
					sh "docker push ${image}:${tag}"
					sh "docker tag ${image}:${tag} ${image}:latest"
					sh "docker push ${image}:latest"
				}

			}
		}


		// #6 배포 Stage
		stage('Deploy') {
			echo "Start Deply"
			container('kubectl') {
				sh "kubectl apply -n ${namespace} -f ${deployment}"
				sh "kubectl apply -n ${namespace} -f ${service}"
				sh "kubectl get svc -n ${namespace} " 
			}
		}


		echo "End"
		// Slack - 빌드 성공시
		notifySlack("SUCCESS", "#00FF00")


	} catch(e) {
		// Slack - 빌드 실패시
		echo "Fail : " + e
		notifySlack("FAILED", "#FF0000")
	}
  }
}
